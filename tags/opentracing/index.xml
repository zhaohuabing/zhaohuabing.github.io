<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opentracing on Huabing Blog</title>
    <link>https://zhaohuabing.com/tags/opentracing/</link>
    <description>Recent content in Opentracing on Huabing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zhaohuabing.com/tags/opentracing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Enhance Istio Distributed Tracing with OpenTracing</title>
      <link>https://zhaohuabing.com/post/2019-07-02-using-opentracing-with-istio-english/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhaohuabing.com/post/2019-07-02-using-opentracing-with-istio-english/</guid>
      <description>In the previous post, we discussed how to use Opentracing to help Istio Service Mesh to propagate tracing context across process boundaries, and how to enrich Istio/Envoy generated traces with method-level spans to get more fine-grained insights to the services. For now, all that we have been talking is just about synchronous RPC (HTTP/REST), however, we can’t ignore the fact that asynchronous messaging is also widely</description>
    </item>
    
    <item>
      <title>Enhance Istio Distributed Tracing with OpenTracing</title>
      <link>https://zhaohuabing.com/post/2019-06-22-using-opentracing-with-istio-english/</link>
      <pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhaohuabing.com/post/2019-06-22-using-opentracing-with-istio-english/</guid>
      <description>While evolving towards a microservices architecture, the biggest change is that the monolith application has been divided into multiple independent processes(or services), as a result, a method call between software modules now becomes a remote procedure call go through multiple services. A client request usually goes through a couple of or even a dozen of services in a complex microservices system, which makes it really hard to figure out w</description>
    </item>
    
    <item>
      <title>洞若观火：使用OpenTracing增强Istio的调用链跟踪</title>
      <link>https://zhaohuabing.com/post/2019-07-02-using-opentracing-with-istio/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhaohuabing.com/post/2019-07-02-using-opentracing-with-istio/</guid>
      <description>在上一篇文章中，我们通过一个网上商店的示例程序学习了如何使用Opentracing在Istio服务网格中传递分布式调用跟踪的上下文，以及如何</description>
    </item>
    
    <item>
      <title>洞若观火：使用OpenTracing增强Istio的调用链跟踪</title>
      <link>https://zhaohuabing.com/post/2019-06-22-using-opentracing-with-istio/</link>
      <pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhaohuabing.com/post/2019-06-22-using-opentracing-with-istio/</guid>
      <description>分布式调用跟踪和Opentracing规范 什么是分布式调用跟踪？ 相比传统的“巨石”应用，微服务的一个主要变化是将应用中的不同模块拆分为了独立</description>
    </item>
    
  </channel>
</rss>